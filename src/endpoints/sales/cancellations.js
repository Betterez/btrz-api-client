const {authorizationHeaders} = require("./../endpoints_helpers.js");

/**
 * @typedef {{
 *   fees: string[],
 *   flexPasses: string[],
 *   parcels: string[],
 *   redeemableItems: string[],
 *   soldItems: string[],
 *   tickets: string[],
 *   giftCertificates: string[],
 *   insurances: string[],
 *   trxId: string,
 *   penalty?: {
 *      amount: number,
 *      reason: string
 *   }
 * }} CancelSetData
*/

function cancellationEndpointsFactory({client, internalAuthTokenProvider}) {
  /**
   * Creates a set of refundable items and payments to be refunded
   * @param {Object} params
   * @param {string} params.token Public key
   * @param {string} params.jwtToken Auth token
   * @param {CancelSetData} params.cancelData List of item ids grouped by family
   * @param {Object} params.headers HTTP Headers
   * @returns {Promise} A cancel set object
   */
  function createCancelSet({token, jwtToken, cancelData, headers}) {
    return client({
      url: "/cancellations",
      method: "POST",
      data: {
        cancellation: cancelData
      },
      headers: authorizationHeaders({token, jwtToken, internalAuthTokenProvider, headers})
    });
  }

  /**
   * Creates and runs payment refunds
   * @param {Object} params
   * @param {string} params.token Public key
   * @param {string} params.jwtToken Auth token
   * @param {Object} params.cancelSet An unmodified cancel set object generated by the cancellations endpoint
   * @param {Object} params.headers HTTP Headers
   * @returns {Promise} Refund result
   */
  function createRefund({token, jwtToken, cancelSet, headers}) {
    return client({
      url: "/cancellations",
      method: "PUT",
      data: cancelSet,
      headers: authorizationHeaders({token, jwtToken, internalAuthTokenProvider, headers})
    });
  }

  return {
    sets: {
      create: createCancelSet
    },
    refunds: {
      create: createRefund
    }
  };
}

module.exports = cancellationEndpointsFactory;
